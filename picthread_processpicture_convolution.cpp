#include "picthread.h"

///
/// \brief PicThread::Convolution_Process - Convolution processing
/// \param BmpBuf_
/// \param BmpBufX_
/// \param MinY
/// \param MaxY
/// \param PicW_
/// \param P
/// \param OpMatrixIR_
/// \param OpMatrixIG_
/// \param OpMatrixIB_
///
void PicThread::Convolution_Process(uchar * BmpBuf_, uchar * BmpBufX_, int MinY, int MaxY, int PicW_, int PicH_, int &P, int * OpMatrixIR_, int * OpMatrixIG_, int * OpMatrixIB_)
{
    int X, Y;
    int RX, GX, BX;
    int PicWPtr = PicW_ << 2;
    int L1 = PicWPtr;
    int L1m4 = PicWPtr - 4;
    int L1m8 = PicWPtr - 8;
    int L1p4 = PicWPtr + 4;
    int L1p8 = PicWPtr + 8;
    int L2 = PicWPtr + PicWPtr;
    int L2m4 = PicWPtr + PicWPtr - 4;
    int L2m8 = PicWPtr + PicWPtr - 8;
    int L2p4 = PicWPtr + PicWPtr + 4;
    int L2p8 = PicWPtr + PicWPtr + 8;
    int Offset1R = OpMatrixIR_[25];
    int Offset1G = OpMatrixIG_[25];
    int Offset1B = OpMatrixIB_[25];
    int GainR = OpMatrixIR_[26];
    int GainG = OpMatrixIG_[26];
    int GainB = OpMatrixIB_[26];
    int Offset2R = OpMatrixIR_[27];
    int Offset2G = OpMatrixIG_[27];
    int Offset2B = OpMatrixIB_[27];

    if (MinY == 0)
    {
        MinY += 2;

        RX = 0;
        GX = 0;
        BX = 0;
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[0];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[1];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[2];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[3];
        RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[4];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[5];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[6];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[7];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[8];
        RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[9];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[10];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[11];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[13];
        RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[14];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[15];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[16];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[17];
        RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[18];
        RX += ((int)BmpBuf_[P + L1p8 + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + L1p8 + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + L1p8 + 0]) * OpMatrixIB_[19];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[20];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[21];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[22];
        RX += ((int)BmpBuf_[P + L2p4 + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + L2p4 + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + L2p4 + 0]) * OpMatrixIB_[23];
        RX += ((int)BmpBuf_[P + L2p8 + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + L2p8 + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + L2p8 + 0]) * OpMatrixIB_[24];
        RX = ((RX + Offset1R) / GainR) + Offset2R;
        GX = ((GX + Offset1G) / GainG) + Offset2G;
        BX = ((BX + Offset1B) / GainB) + Offset2B;
        BmpBufX_[P + 2] = Range(RX, 0, 255);
        BmpBufX_[P + 1] = Range(GX, 0, 255);
        BmpBufX_[P + 0] = Range(BX, 0, 255);
        P += 4;

        RX = 0;
        GX = 0;
        BX = 0;
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[0];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[1];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[2];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[3];
        RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[4];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[5];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[6];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[7];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[8];
        RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[9];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[10];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[11];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[13];
        RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[14];
        RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[15];
        RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[16];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[17];
        RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[18];
        RX += ((int)BmpBuf_[P + L1p8 + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + L1p8 + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + L1p8 + 0]) * OpMatrixIB_[19];
        RX += ((int)BmpBuf_[P + L2m4 + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P + L2m4 + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P + L2m4 + 0]) * OpMatrixIB_[20];
        RX += ((int)BmpBuf_[P + L2m4 + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P + L2m4 + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P + L2m4 + 0]) * OpMatrixIB_[21];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[22];
        RX += ((int)BmpBuf_[P + L2p4 + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + L2p4 + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + L2p4 + 0]) * OpMatrixIB_[23];
        RX += ((int)BmpBuf_[P + L2p8 + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + L2p8 + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + L2p8 + 0]) * OpMatrixIB_[24];
        RX = ((RX + Offset1R) / GainR) + Offset2R;
        GX = ((GX + Offset1G) / GainG) + Offset2G;
        BX = ((BX + Offset1B) / GainB) + Offset2B;
        BmpBufX_[P + 2] = Range(RX, 0, 255);
        BmpBufX_[P + 1] = Range(GX, 0, 255);
        BmpBufX_[P + 0] = Range(BX, 0, 255);
        P += 4;

        for (X = 2; X < PicW_ - 2; X++)
        {
            RX = 0;
            GX = 0;
            BX = 0;
            RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[0];
            RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[1];
            RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[2];
            RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[3];
            RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[4];
            RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[5];
            RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[6];
            RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[7];
            RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[8];
            RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[9];
            RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[10];
            RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[11];
            RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
            RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[13];
            RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[14];
            RX += ((int)BmpBuf_[P + L1m8 + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P + L1m8 + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P + L1m8 + 0]) * OpMatrixIB_[15];
            RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[16];
            RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[17];
            RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[18];
            RX += ((int)BmpBuf_[P + L1p8 + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + L1p8 + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + L1p8 + 0]) * OpMatrixIB_[19];
            RX += ((int)BmpBuf_[P + L2m8 + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P + L2m8 + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P + L2m8 + 0]) * OpMatrixIB_[20];
            RX += ((int)BmpBuf_[P + L2m4 + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P + L2m4 + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P + L2m4 + 0]) * OpMatrixIB_[21];
            RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[22];
            RX += ((int)BmpBuf_[P + L2p4 + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + L2p4 + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + L2p4 + 0]) * OpMatrixIB_[23];
            RX += ((int)BmpBuf_[P + L2p8 + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + L2p8 + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + L2p8 + 0]) * OpMatrixIB_[24];
            RX = ((RX + Offset1R) / GainR) + Offset2R;
            GX = ((GX + Offset1G) / GainG) + Offset2G;
            BX = ((BX + Offset1B) / GainB) + Offset2B;
            BmpBufX_[P + 2] = Range(RX, 0, 255);
            BmpBufX_[P + 1] = Range(GX, 0, 255);
            BmpBufX_[P + 0] = Range(BX, 0, 255);
            P += 4;
        }

        RX = 0;
        GX = 0;
        BX = 0;
        RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[0];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[1];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[2];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[3];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[4];
        RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[5];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[6];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[7];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[8];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[9];
        RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[10];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[11];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[13];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[14];
        RX += ((int)BmpBuf_[P + L1m8 + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P + L1m8 + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P + L1m8 + 0]) * OpMatrixIB_[15];
        RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[16];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[17];
        RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[18];
        RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[19];
        RX += ((int)BmpBuf_[P + L2m8 + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P + L2m8 + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P + L2m8 + 0]) * OpMatrixIB_[20];
        RX += ((int)BmpBuf_[P + L2m4 + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P + L2m4 + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P + L2m4 + 0]) * OpMatrixIB_[21];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[22];
        RX += ((int)BmpBuf_[P + L2p4 + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + L2p4 + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + L2p4 + 0]) * OpMatrixIB_[23];
        RX += ((int)BmpBuf_[P + L2p4 + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + L2p4 + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + L2p4 + 0]) * OpMatrixIB_[24];
        RX = ((RX + Offset1R) / GainR) + Offset2R;
        GX = ((GX + Offset1G) / GainG) + Offset2G;
        BX = ((BX + Offset1B) / GainB) + Offset2B;
        BmpBufX_[P + 2] = Range(RX, 0, 255);
        BmpBufX_[P + 1] = Range(GX, 0, 255);
        BmpBufX_[P + 0] = Range(BX, 0, 255);
        P += 4;

        RX = 0;
        GX = 0;
        BX = 0;
        RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[0];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[1];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[2];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[3];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[4];
        RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[5];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[6];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[7];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[8];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[9];
        RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[10];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[11];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[13];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[14];
        RX += ((int)BmpBuf_[P + L1m8 + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P + L1m8 + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P + L1m8 + 0]) * OpMatrixIB_[15];
        RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[16];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[17];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[18];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[19];
        RX += ((int)BmpBuf_[P + L2m8 + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P + L2m8 + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P + L2m8 + 0]) * OpMatrixIB_[20];
        RX += ((int)BmpBuf_[P + L2m4 + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P + L2m4 + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P + L2m4 + 0]) * OpMatrixIB_[21];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[22];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[23];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[24];
        RX = ((RX + Offset1R) / GainR) + Offset2R;
        GX = ((GX + Offset1G) / GainG) + Offset2G;
        BX = ((BX + Offset1B) / GainB) + Offset2B;
        BmpBufX_[P + 2] = Range(RX, 0, 255);
        BmpBufX_[P + 1] = Range(GX, 0, 255);
        BmpBufX_[P + 0] = Range(BX, 0, 255);
        P += 4;

        RX = 0;
        GX = 0;
        BX = 0;
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[0];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[1];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[2];
        RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[3];
        RX += ((int)BmpBuf_[P - L1m8 + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P - L1m8 + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P - L1m8 + 0]) * OpMatrixIB_[4];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[5];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[6];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[7];
        RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[8];
        RX += ((int)BmpBuf_[P - L1m8 + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P - L1m8 + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P - L1m8 + 0]) * OpMatrixIB_[9];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[10];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[11];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[13];
        RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[14];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[15];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[16];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[17];
        RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[18];
        RX += ((int)BmpBuf_[P + L1p8 + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + L1p8 + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + L1p8 + 0]) * OpMatrixIB_[19];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[20];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[21];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[22];
        RX += ((int)BmpBuf_[P + L2p4 + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + L2p4 + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + L2p4 + 0]) * OpMatrixIB_[23];
        RX += ((int)BmpBuf_[P + L2p8 + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + L2p8 + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + L2p8 + 0]) * OpMatrixIB_[24];
        RX = ((RX + Offset1R) / GainR) + Offset2R;
        GX = ((GX + Offset1G) / GainG) + Offset2G;
        BX = ((BX + Offset1B) / GainB) + Offset2B;
        BmpBufX_[P + 2] = Range(RX, 0, 255);
        BmpBufX_[P + 1] = Range(GX, 0, 255);
        BmpBufX_[P + 0] = Range(BX, 0, 255);
        P += 4;

        RX = 0;
        GX = 0;
        BX = 0;
        RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[0];
        RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[1];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[2];
        RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[3];
        RX += ((int)BmpBuf_[P - L1m8 + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P - L1m8 + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P - L1m8 + 0]) * OpMatrixIB_[4];
        RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[5];
        RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[6];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[7];
        RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[8];
        RX += ((int)BmpBuf_[P - L1m8 + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P - L1m8 + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P - L1m8 + 0]) * OpMatrixIB_[9];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[10];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[11];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[13];
        RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[14];
        RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[15];
        RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[16];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[17];
        RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[18];
        RX += ((int)BmpBuf_[P + L1p8 + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + L1p8 + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + L1p8 + 0]) * OpMatrixIB_[19];
        RX += ((int)BmpBuf_[P + L2m4 + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P + L2m4 + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P + L2m4 + 0]) * OpMatrixIB_[20];
        RX += ((int)BmpBuf_[P + L2m4 + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P + L2m4 + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P + L2m4 + 0]) * OpMatrixIB_[21];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[22];
        RX += ((int)BmpBuf_[P + L2p4 + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + L2p4 + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + L2p4 + 0]) * OpMatrixIB_[23];
        RX += ((int)BmpBuf_[P + L2p8 + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + L2p8 + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + L2p8 + 0]) * OpMatrixIB_[24];
        RX = ((RX + Offset1R) / GainR) + Offset2R;
        GX = ((GX + Offset1G) / GainG) + Offset2G;
        BX = ((BX + Offset1B) / GainB) + Offset2B;
        BmpBufX_[P + 2] = Range(RX, 0, 255);
        BmpBufX_[P + 1] = Range(GX, 0, 255);
        BmpBufX_[P + 0] = Range(BX, 0, 255);
        P += 4;

        for (X = 2; X < PicW_ - 2; X++)
        {
            RX = 0;
            GX = 0;
            BX = 0;
            RX += ((int)BmpBuf_[P - L1p8 + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - L1p8 + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - L1p8 + 0]) * OpMatrixIB_[0];
            RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[1];
            RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[2];
            RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[3];
            RX += ((int)BmpBuf_[P - L1m8 + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P - L1m8 + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P - L1m8 + 0]) * OpMatrixIB_[4];
            RX += ((int)BmpBuf_[P - L1p8 + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - L1p8 + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - L1p8 + 0]) * OpMatrixIB_[5];
            RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[6];
            RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[7];
            RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[8];
            RX += ((int)BmpBuf_[P - L1m8 + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P - L1m8 + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P - L1m8 + 0]) * OpMatrixIB_[9];
            RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[10];
            RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[11];
            RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
            RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[13];
            RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[14];
            RX += ((int)BmpBuf_[P + L1m8 + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P + L1m8 + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P + L1m8 + 0]) * OpMatrixIB_[15];
            RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[16];
            RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[17];
            RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[18];
            RX += ((int)BmpBuf_[P + L1p8 + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + L1p8 + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + L1p8 + 0]) * OpMatrixIB_[19];
            RX += ((int)BmpBuf_[P + L2m8 + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P + L2m8 + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P + L2m8 + 0]) * OpMatrixIB_[20];
            RX += ((int)BmpBuf_[P + L2m4 + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P + L2m4 + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P + L2m4 + 0]) * OpMatrixIB_[21];
            RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[22];
            RX += ((int)BmpBuf_[P + L2p4 + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + L2p4 + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + L2p4 + 0]) * OpMatrixIB_[23];
            RX += ((int)BmpBuf_[P + L2p8 + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + L2p8 + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + L2p8 + 0]) * OpMatrixIB_[24];
            RX = ((RX + Offset1R) / GainR) + Offset2R;
            GX = ((GX + Offset1G) / GainG) + Offset2G;
            BX = ((BX + Offset1B) / GainB) + Offset2B;
            BmpBufX_[P + 2] = Range(RX, 0, 255);
            BmpBufX_[P + 1] = Range(GX, 0, 255);
            BmpBufX_[P + 0] = Range(BX, 0, 255);
            P += 4;
        }

        RX = 0;
        GX = 0;
        BX = 0;
        RX += ((int)BmpBuf_[P - L1p8 + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - L1p8 + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - L1p8 + 0]) * OpMatrixIB_[0];
        RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[1];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[2];
        RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[3];
        RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[4];
        RX += ((int)BmpBuf_[P - L1p8 + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - L1p8 + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - L1p8 + 0]) * OpMatrixIB_[5];
        RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[6];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[7];
        RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[8];
        RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[9];
        RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[10];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[11];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[13];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[14];
        RX += ((int)BmpBuf_[P + L1m8 + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P + L1m8 + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P + L1m8 + 0]) * OpMatrixIB_[15];
        RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[16];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[17];
        RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[18];
        RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[19];
        RX += ((int)BmpBuf_[P + L2m8 + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P + L2m8 + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P + L2m8 + 0]) * OpMatrixIB_[20];
        RX += ((int)BmpBuf_[P + L2m4 + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P + L2m4 + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P + L2m4 + 0]) * OpMatrixIB_[21];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[22];
        RX += ((int)BmpBuf_[P + L2p4 + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + L2p4 + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + L2p4 + 0]) * OpMatrixIB_[23];
        RX += ((int)BmpBuf_[P + L2p4 + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + L2p4 + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + L2p4 + 0]) * OpMatrixIB_[24];
        RX = ((RX + Offset1R) / GainR) + Offset2R;
        GX = ((GX + Offset1G) / GainG) + Offset2G;
        BX = ((BX + Offset1B) / GainB) + Offset2B;
        BmpBufX_[P + 2] = Range(RX, 0, 255);
        BmpBufX_[P + 1] = Range(GX, 0, 255);
        BmpBufX_[P + 0] = Range(BX, 0, 255);
        P += 4;

        RX = 0;
        GX = 0;
        BX = 0;
        RX += ((int)BmpBuf_[P - L1p8 + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - L1p8 + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - L1p8 + 0]) * OpMatrixIB_[0];
        RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[1];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[2];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[3];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[4];
        RX += ((int)BmpBuf_[P - L1p8 + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - L1p8 + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - L1p8 + 0]) * OpMatrixIB_[5];
        RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[6];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[7];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[8];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[9];
        RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[10];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[11];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[13];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[14];
        RX += ((int)BmpBuf_[P + L1m8 + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P + L1m8 + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P + L1m8 + 0]) * OpMatrixIB_[15];
        RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[16];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[17];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[18];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[19];
        RX += ((int)BmpBuf_[P + L2m8 + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P + L2m8 + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P + L2m8 + 0]) * OpMatrixIB_[20];
        RX += ((int)BmpBuf_[P + L2m4 + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P + L2m4 + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P + L2m4 + 0]) * OpMatrixIB_[21];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[22];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[23];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[24];
        RX = ((RX + Offset1R) / GainR) + Offset2R;
        GX = ((GX + Offset1G) / GainG) + Offset2G;
        BX = ((BX + Offset1B) / GainB) + Offset2B;
        BmpBufX_[P + 2] = Range(RX, 0, 255);
        BmpBufX_[P + 1] = Range(GX, 0, 255);
        BmpBufX_[P + 0] = Range(BX, 0, 255);
        P += 4;
    }

    if (MaxY == PicH_)
    {
        MaxY -= 2;
    }

    for (Y = MinY; Y < MaxY; Y++)
    {
        RX = 0;
        GX = 0;
        BX = 0;
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[0];
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[1];
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[2];
        RX += ((int)BmpBuf_[P - L2m4 + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P - L2m4 + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P - L2m4 + 0]) * OpMatrixIB_[3];
        RX += ((int)BmpBuf_[P - L2m8 + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P - L2m8 + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P - L2m8 + 0]) * OpMatrixIB_[4];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[5];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[6];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[7];
        RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[8];
        RX += ((int)BmpBuf_[P - L1m8 + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P - L1m8 + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P - L1m8 + 0]) * OpMatrixIB_[9];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[10];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[11];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[13];
        RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[14];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[15];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[16];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[17];
        RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[18];
        RX += ((int)BmpBuf_[P + L1p8 + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + L1p8 + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + L1p8 + 0]) * OpMatrixIB_[19];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[20];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[21];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[22];
        RX += ((int)BmpBuf_[P + L2p4 + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + L2p4 + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + L2p4 + 0]) * OpMatrixIB_[23];
        RX += ((int)BmpBuf_[P + L2p8 + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + L2p8 + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + L2p8 + 0]) * OpMatrixIB_[24];
        RX = ((RX + Offset1R) / GainR) + Offset2R;
        GX = ((GX + Offset1G) / GainG) + Offset2G;
        BX = ((BX + Offset1B) / GainB) + Offset2B;
        BmpBufX_[P + 2] = Range(RX, 0, 255);
        BmpBufX_[P + 1] = Range(GX, 0, 255);
        BmpBufX_[P + 0] = Range(BX, 0, 255);
        P += 4;

        RX = 0;
        GX = 0;
        BX = 0;
        RX += ((int)BmpBuf_[P - L2p4 + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - L2p4 + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - L2p4 + 0]) * OpMatrixIB_[0];
        RX += ((int)BmpBuf_[P - L2p4 + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - L2p4 + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - L2p4 + 0]) * OpMatrixIB_[1];
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[2];
        RX += ((int)BmpBuf_[P - L2m4 + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P - L2m4 + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P - L2m4 + 0]) * OpMatrixIB_[3];
        RX += ((int)BmpBuf_[P - L2m8 + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P - L2m8 + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P - L2m8 + 0]) * OpMatrixIB_[4];
        RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[5];
        RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[6];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[7];
        RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[8];
        RX += ((int)BmpBuf_[P - L1m8 + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P - L1m8 + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P - L1m8 + 0]) * OpMatrixIB_[9];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[10];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[11];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[13];
        RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[14];
        RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[15];
        RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[16];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[17];
        RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[18];
        RX += ((int)BmpBuf_[P + L1p8 + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + L1p8 + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + L1p8 + 0]) * OpMatrixIB_[19];
        RX += ((int)BmpBuf_[P + L2m4 + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P + L2m4 + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P + L2m4 + 0]) * OpMatrixIB_[20];
        RX += ((int)BmpBuf_[P + L2m4 + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P + L2m4 + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P + L2m4 + 0]) * OpMatrixIB_[21];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[22];
        RX += ((int)BmpBuf_[P + L2p4 + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + L2p4 + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + L2p4 + 0]) * OpMatrixIB_[23];
        RX += ((int)BmpBuf_[P + L2p8 + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + L2p8 + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + L2p8 + 0]) * OpMatrixIB_[24];
        RX = ((RX + Offset1R) / GainR) + Offset2R;
        GX = ((GX + Offset1G) / GainG) + Offset2G;
        BX = ((BX + Offset1B) / GainB) + Offset2B;
        BmpBufX_[P + 2] = Range(RX, 0, 255);
        BmpBufX_[P + 1] = Range(GX, 0, 255);
        BmpBufX_[P + 0] = Range(BX, 0, 255);
        P += 4;

        for (X = 2; X < PicW_ - 2; X++)
        {
            RX = 0;
            GX = 0;
            BX = 0;
            RX += ((int)BmpBuf_[P - L2p8 + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - L2p8 + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - L2p8 + 0]) * OpMatrixIB_[0];
            RX += ((int)BmpBuf_[P - L2p4 + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - L2p4 + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - L2p4 + 0]) * OpMatrixIB_[1];
            RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[2];
            RX += ((int)BmpBuf_[P - L2m4 + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P - L2m4 + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P - L2m4 + 0]) * OpMatrixIB_[3];
            RX += ((int)BmpBuf_[P - L2m8 + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P - L2m8 + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P - L2m8 + 0]) * OpMatrixIB_[4];
            RX += ((int)BmpBuf_[P - L1p8 + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - L1p8 + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - L1p8 + 0]) * OpMatrixIB_[5];
            RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[6];
            RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[7];
            RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[8];
            RX += ((int)BmpBuf_[P - L1m8 + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P - L1m8 + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P - L1m8 + 0]) * OpMatrixIB_[9];
            RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[10];
            RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[11];
            RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
            RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[13];
            RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[14];
            RX += ((int)BmpBuf_[P + L1m8 + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P + L1m8 + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P + L1m8 + 0]) * OpMatrixIB_[15];
            RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[16];
            RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[17];
            RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[18];
            RX += ((int)BmpBuf_[P + L1p8 + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + L1p8 + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + L1p8 + 0]) * OpMatrixIB_[19];
            RX += ((int)BmpBuf_[P + L2m8 + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P + L2m8 + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P + L2m8 + 0]) * OpMatrixIB_[20];
            RX += ((int)BmpBuf_[P + L2m4 + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P + L2m4 + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P + L2m4 + 0]) * OpMatrixIB_[21];
            RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[22];
            RX += ((int)BmpBuf_[P + L2p4 + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + L2p4 + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + L2p4 + 0]) * OpMatrixIB_[23];
            RX += ((int)BmpBuf_[P + L2p8 + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + L2p8 + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + L2p8 + 0]) * OpMatrixIB_[24];
            RX = ((RX + Offset1R) / GainR) + Offset2R;
            GX = ((GX + Offset1G) / GainG) + Offset2G;
            BX = ((BX + Offset1B) / GainB) + Offset2B;
            BmpBufX_[P + 2] = Range(RX, 0, 255);
            BmpBufX_[P + 1] = Range(GX, 0, 255);
            BmpBufX_[P + 0] = Range(BX, 0, 255);
            P += 4;
        }

        RX = 0;
        GX = 0;
        BX = 0;
        RX += ((int)BmpBuf_[P - L2p8 + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - L2p8 + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - L2p8 + 0]) * OpMatrixIB_[0];
        RX += ((int)BmpBuf_[P - L2p4 + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - L2p4 + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - L2p4 + 0]) * OpMatrixIB_[1];
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[2];
        RX += ((int)BmpBuf_[P - L2m4 + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P - L2m4 + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P - L2m4 + 0]) * OpMatrixIB_[3];
        RX += ((int)BmpBuf_[P - L2m4 + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P - L2m4 + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P - L2m4 + 0]) * OpMatrixIB_[4];
        RX += ((int)BmpBuf_[P - L1p8 + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - L1p8 + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - L1p8 + 0]) * OpMatrixIB_[5];
        RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[6];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[7];
        RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[8];
        RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[9];
        RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[10];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[11];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[13];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[14];
        RX += ((int)BmpBuf_[P + L1m8 + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P + L1m8 + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P + L1m8 + 0]) * OpMatrixIB_[15];
        RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[16];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[17];
        RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[18];
        RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[19];
        RX += ((int)BmpBuf_[P + L2m8 + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P + L2m8 + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P + L2m8 + 0]) * OpMatrixIB_[20];
        RX += ((int)BmpBuf_[P + L2m4 + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P + L2m4 + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P + L2m4 + 0]) * OpMatrixIB_[21];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[22];
        RX += ((int)BmpBuf_[P + L2p4 + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + L2p4 + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + L2p4 + 0]) * OpMatrixIB_[23];
        RX += ((int)BmpBuf_[P + L2p4 + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + L2p4 + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + L2p4 + 0]) * OpMatrixIB_[24];
        RX = ((RX + Offset1R) / GainR) + Offset2R;
        GX = ((GX + Offset1G) / GainG) + Offset2G;
        BX = ((BX + Offset1B) / GainB) + Offset2B;
        BmpBufX_[P + 2] = Range(RX, 0, 255);
        BmpBufX_[P + 1] = Range(GX, 0, 255);
        BmpBufX_[P + 0] = Range(BX, 0, 255);
        P += 4;

        RX = 0;
        GX = 0;
        BX = 0;
        RX += ((int)BmpBuf_[P - L2p8 + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - L2p8 + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - L2p8 + 0]) * OpMatrixIB_[0];
        RX += ((int)BmpBuf_[P - L2p4 + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - L2p4 + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - L2p4 + 0]) * OpMatrixIB_[1];
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[2];
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[3];
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[4];
        RX += ((int)BmpBuf_[P - L1p8 + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - L1p8 + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - L1p8 + 0]) * OpMatrixIB_[5];
        RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[6];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[7];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[8];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[9];
        RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[10];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[11];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[13];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[14];
        RX += ((int)BmpBuf_[P + L1m8 + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P + L1m8 + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P + L1m8 + 0]) * OpMatrixIB_[15];
        RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[16];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[17];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[18];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[19];
        RX += ((int)BmpBuf_[P + L2m8 + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P + L2m8 + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P + L2m8 + 0]) * OpMatrixIB_[20];
        RX += ((int)BmpBuf_[P + L2m4 + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P + L2m4 + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P + L2m4 + 0]) * OpMatrixIB_[21];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[22];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[23];
        RX += ((int)BmpBuf_[P + L2   + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + L2   + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + L2   + 0]) * OpMatrixIB_[24];
        RX = ((RX + Offset1R) / GainR) + Offset2R;
        GX = ((GX + Offset1G) / GainG) + Offset2G;
        BX = ((BX + Offset1B) / GainB) + Offset2B;
        BmpBufX_[P + 2] = Range(RX, 0, 255);
        BmpBufX_[P + 1] = Range(GX, 0, 255);
        BmpBufX_[P + 0] = Range(BX, 0, 255);
        P += 4;
    }

    if ((MaxY + 2) == PicH_)
    {
        RX = 0;
        GX = 0;
        BX = 0;
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[0];
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[1];
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[2];
        RX += ((int)BmpBuf_[P - L2m4 + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P - L2m4 + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P - L2m4 + 0]) * OpMatrixIB_[3];
        RX += ((int)BmpBuf_[P - L2m8 + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P - L2m8 + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P - L2m8 + 0]) * OpMatrixIB_[4];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[5];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[6];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[7];
        RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[8];
        RX += ((int)BmpBuf_[P - L1m8 + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P - L1m8 + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P - L1m8 + 0]) * OpMatrixIB_[9];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[10];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[11];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[13];
        RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[14];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[15];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[16];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[17];
        RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[18];
        RX += ((int)BmpBuf_[P + L1p8 + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + L1p8 + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + L1p8 + 0]) * OpMatrixIB_[19];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[20];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[21];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[22];
        RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[23];
        RX += ((int)BmpBuf_[P + L1p8 + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + L1p8 + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + L1p8 + 0]) * OpMatrixIB_[24];
        RX = ((RX + Offset1R) / GainR) + Offset2R;
        GX = ((GX + Offset1G) / GainG) + Offset2G;
        BX = ((BX + Offset1B) / GainB) + Offset2B;
        BmpBufX_[P + 2] = Range(RX, 0, 255);
        BmpBufX_[P + 1] = Range(GX, 0, 255);
        BmpBufX_[P + 0] = Range(BX, 0, 255);
        P += 4;

        RX = 0;
        GX = 0;
        BX = 0;
        RX += ((int)BmpBuf_[P - L2p4 + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - L2p4 + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - L2p4 + 0]) * OpMatrixIB_[0];
        RX += ((int)BmpBuf_[P - L2p4 + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - L2p4 + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - L2p4 + 0]) * OpMatrixIB_[1];
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[2];
        RX += ((int)BmpBuf_[P - L2m4 + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P - L2m4 + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P - L2m4 + 0]) * OpMatrixIB_[3];
        RX += ((int)BmpBuf_[P - L2m8 + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P - L2m8 + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P - L2m8 + 0]) * OpMatrixIB_[4];
        RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[5];
        RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[6];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[7];
        RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[8];
        RX += ((int)BmpBuf_[P - L1m8 + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P - L1m8 + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P - L1m8 + 0]) * OpMatrixIB_[9];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[10];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[11];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[13];
        RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[14];
        RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[15];
        RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[16];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[17];
        RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[18];
        RX += ((int)BmpBuf_[P + L1p8 + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + L1p8 + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + L1p8 + 0]) * OpMatrixIB_[19];
        RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[20];
        RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[21];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[22];
        RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[23];
        RX += ((int)BmpBuf_[P + L1p8 + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + L1p8 + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + L1p8 + 0]) * OpMatrixIB_[24];
        RX = ((RX + Offset1R) / GainR) + Offset2R;
        GX = ((GX + Offset1G) / GainG) + Offset2G;
        BX = ((BX + Offset1B) / GainB) + Offset2B;
        BmpBufX_[P + 2] = Range(RX, 0, 255);
        BmpBufX_[P + 1] = Range(GX, 0, 255);
        BmpBufX_[P + 0] = Range(BX, 0, 255);
        P += 4;

        for (X = 2; X < PicW_ - 2; X++)
        {
            RX = 0;
            GX = 0;
            BX = 0;
            RX += ((int)BmpBuf_[P - L2p8 + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - L2p8 + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - L2p8 + 0]) * OpMatrixIB_[0];
            RX += ((int)BmpBuf_[P - L2p4 + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - L2p4 + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - L2p4 + 0]) * OpMatrixIB_[1];
            RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[2];
            RX += ((int)BmpBuf_[P - L2m4 + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P - L2m4 + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P - L2m4 + 0]) * OpMatrixIB_[3];
            RX += ((int)BmpBuf_[P - L2m8 + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P - L2m8 + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P - L2m8 + 0]) * OpMatrixIB_[4];
            RX += ((int)BmpBuf_[P - L1p8 + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - L1p8 + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - L1p8 + 0]) * OpMatrixIB_[5];
            RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[6];
            RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[7];
            RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[8];
            RX += ((int)BmpBuf_[P - L1m8 + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P - L1m8 + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P - L1m8 + 0]) * OpMatrixIB_[9];
            RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[10];
            RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[11];
            RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
            RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[13];
            RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[14];
            RX += ((int)BmpBuf_[P + L1m8 + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P + L1m8 + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P + L1m8 + 0]) * OpMatrixIB_[15];
            RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[16];
            RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[17];
            RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[18];
            RX += ((int)BmpBuf_[P + L1p8 + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + L1p8 + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + L1p8 + 0]) * OpMatrixIB_[19];
            RX += ((int)BmpBuf_[P + L1m8 + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P + L1m8 + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P + L1m8 + 0]) * OpMatrixIB_[20];
            RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[21];
            RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[22];
            RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[23];
            RX += ((int)BmpBuf_[P + L1p8 + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + L1p8 + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + L1p8 + 0]) * OpMatrixIB_[24];
            RX = ((RX + Offset1R) / GainR) + Offset2R;
            GX = ((GX + Offset1G) / GainG) + Offset2G;
            BX = ((BX + Offset1B) / GainB) + Offset2B;
            BmpBufX_[P + 2] = Range(RX, 0, 255);
            BmpBufX_[P + 1] = Range(GX, 0, 255);
            BmpBufX_[P + 0] = Range(BX, 0, 255);
            P += 4;
        }

        RX = 0;
        GX = 0;
        BX = 0;
        RX += ((int)BmpBuf_[P - L2p8 + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - L2p8 + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - L2p8 + 0]) * OpMatrixIB_[0];
        RX += ((int)BmpBuf_[P - L2p4 + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - L2p4 + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - L2p4 + 0]) * OpMatrixIB_[1];
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[2];
        RX += ((int)BmpBuf_[P - L2m4 + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P - L2m4 + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P - L2m4 + 0]) * OpMatrixIB_[3];
        RX += ((int)BmpBuf_[P - L2m4 + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P - L2m4 + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P - L2m4 + 0]) * OpMatrixIB_[4];
        RX += ((int)BmpBuf_[P - L1p8 + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - L1p8 + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - L1p8 + 0]) * OpMatrixIB_[5];
        RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[6];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[7];
        RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[8];
        RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[9];
        RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[10];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[11];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[13];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[14];
        RX += ((int)BmpBuf_[P + L1m8 + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P + L1m8 + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P + L1m8 + 0]) * OpMatrixIB_[15];
        RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[16];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[17];
        RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[18];
        RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[19];
        RX += ((int)BmpBuf_[P + L1m8 + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P + L1m8 + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P + L1m8 + 0]) * OpMatrixIB_[20];
        RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[21];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[22];
        RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[23];
        RX += ((int)BmpBuf_[P + L1p4 + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + L1p4 + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + L1p4 + 0]) * OpMatrixIB_[24];
        RX = ((RX + Offset1R) / GainR) + Offset2R;
        GX = ((GX + Offset1G) / GainG) + Offset2G;
        BX = ((BX + Offset1B) / GainB) + Offset2B;
        BmpBufX_[P + 2] = Range(RX, 0, 255);
        BmpBufX_[P + 1] = Range(GX, 0, 255);
        BmpBufX_[P + 0] = Range(BX, 0, 255);
        P += 4;

        RX = 0;
        GX = 0;
        BX = 0;
        RX += ((int)BmpBuf_[P - L2p8 + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - L2p8 + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - L2p8 + 0]) * OpMatrixIB_[0];
        RX += ((int)BmpBuf_[P - L2p4 + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - L2p4 + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - L2p4 + 0]) * OpMatrixIB_[1];
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[2];
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[3];
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[4];
        RX += ((int)BmpBuf_[P - L1p8 + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - L1p8 + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - L1p8 + 0]) * OpMatrixIB_[5];
        RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[6];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[7];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[8];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[9];
        RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[10];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[11];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[13];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[14];
        RX += ((int)BmpBuf_[P + L1m8 + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P + L1m8 + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P + L1m8 + 0]) * OpMatrixIB_[15];
        RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[16];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[17];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[18];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[19];
        RX += ((int)BmpBuf_[P + L1m8 + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P + L1m8 + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P + L1m8 + 0]) * OpMatrixIB_[20];
        RX += ((int)BmpBuf_[P + L1m4 + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P + L1m4 + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P + L1m4 + 0]) * OpMatrixIB_[21];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[22];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[23];
        RX += ((int)BmpBuf_[P + L1   + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + L1   + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + L1   + 0]) * OpMatrixIB_[24];
        RX = ((RX + Offset1R) / GainR) + Offset2R;
        GX = ((GX + Offset1G) / GainG) + Offset2G;
        BX = ((BX + Offset1B) / GainB) + Offset2B;
        BmpBufX_[P + 2] = Range(RX, 0, 255);
        BmpBufX_[P + 1] = Range(GX, 0, 255);
        BmpBufX_[P + 0] = Range(BX, 0, 255);
        P += 4;

        RX = 0;
        GX = 0;
        BX = 0;
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[0];
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[1];
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[2];
        RX += ((int)BmpBuf_[P - L2m4 + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P - L2m4 + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P - L2m4 + 0]) * OpMatrixIB_[3];
        RX += ((int)BmpBuf_[P - L2m8 + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P - L2m8 + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P - L2m8 + 0]) * OpMatrixIB_[4];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[5];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[6];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[7];
        RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[8];
        RX += ((int)BmpBuf_[P - L1m8 + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P - L1m8 + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P - L1m8 + 0]) * OpMatrixIB_[9];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[10];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[11];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[13];
        RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[14];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[15];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[16];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[17];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[18];
        RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[19];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[20];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[21];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[22];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[23];
        RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[24];
        RX = ((RX + Offset1R) / GainR) + Offset2R;
        GX = ((GX + Offset1G) / GainG) + Offset2G;
        BX = ((BX + Offset1B) / GainB) + Offset2B;
        BmpBufX_[P + 2] = Range(RX, 0, 255);
        BmpBufX_[P + 1] = Range(GX, 0, 255);
        BmpBufX_[P + 0] = Range(BX, 0, 255);
        P += 4;

        RX = 0;
        GX = 0;
        BX = 0;
        RX += ((int)BmpBuf_[P - L2p4 + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - L2p4 + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - L2p4 + 0]) * OpMatrixIB_[0];
        RX += ((int)BmpBuf_[P - L2p4 + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - L2p4 + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - L2p4 + 0]) * OpMatrixIB_[1];
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[2];
        RX += ((int)BmpBuf_[P - L2m4 + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P - L2m4 + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P - L2m4 + 0]) * OpMatrixIB_[3];
        RX += ((int)BmpBuf_[P - L2m8 + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P - L2m8 + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P - L2m8 + 0]) * OpMatrixIB_[4];
        RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[5];
        RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[6];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[7];
        RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[8];
        RX += ((int)BmpBuf_[P - L1m8 + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P - L1m8 + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P - L1m8 + 0]) * OpMatrixIB_[9];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[10];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[11];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[13];
        RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[14];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[15];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[16];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[17];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[18];
        RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[19];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[20];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[21];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[22];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[23];
        RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[24];
        RX = ((RX + Offset1R) / GainR) + Offset2R;
        GX = ((GX + Offset1G) / GainG) + Offset2G;
        BX = ((BX + Offset1B) / GainB) + Offset2B;
        BmpBufX_[P + 2] = Range(RX, 0, 255);
        BmpBufX_[P + 1] = Range(GX, 0, 255);
        BmpBufX_[P + 0] = Range(BX, 0, 255);
        P += 4;

        for (X = 2; X < PicW_ - 2; X++)
        {
            RX = 0;
            GX = 0;
            BX = 0;
            RX += ((int)BmpBuf_[P - L2p8 + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - L2p8 + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - L2p8 + 0]) * OpMatrixIB_[0];
            RX += ((int)BmpBuf_[P - L2p4 + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - L2p4 + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - L2p4 + 0]) * OpMatrixIB_[1];
            RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[2];
            RX += ((int)BmpBuf_[P - L2m4 + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P - L2m4 + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P - L2m4 + 0]) * OpMatrixIB_[3];
            RX += ((int)BmpBuf_[P - L2m8 + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P - L2m8 + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P - L2m8 + 0]) * OpMatrixIB_[4];
            RX += ((int)BmpBuf_[P - L1p8 + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - L1p8 + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - L1p8 + 0]) * OpMatrixIB_[5];
            RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[6];
            RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[7];
            RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[8];
            RX += ((int)BmpBuf_[P - L1m8 + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P - L1m8 + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P - L1m8 + 0]) * OpMatrixIB_[9];
            RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[10];
            RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[11];
            RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
            RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[13];
            RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[14];
            RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[15];
            RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[16];
            RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[17];
            RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[18];
            RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[19];
            RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[20];
            RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[21];
            RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[22];
            RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[23];
            RX += ((int)BmpBuf_[P + 8    + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + 8    + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + 8    + 0]) * OpMatrixIB_[24];
            RX = ((RX + Offset1R) / GainR) + Offset2R;
            GX = ((GX + Offset1G) / GainG) + Offset2G;
            BX = ((BX + Offset1B) / GainB) + Offset2B;
            BmpBufX_[P + 2] = Range(RX, 0, 255);
            BmpBufX_[P + 1] = Range(GX, 0, 255);
            BmpBufX_[P + 0] = Range(BX, 0, 255);
            P += 4;
        }

        RX = 0;
        GX = 0;
        BX = 0;
        RX += ((int)BmpBuf_[P - L2p8 + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - L2p8 + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - L2p8 + 0]) * OpMatrixIB_[0];
        RX += ((int)BmpBuf_[P - L2p4 + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - L2p4 + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - L2p4 + 0]) * OpMatrixIB_[1];
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[2];
        RX += ((int)BmpBuf_[P - L2m4 + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P - L2m4 + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P - L2m4 + 0]) * OpMatrixIB_[3];
        RX += ((int)BmpBuf_[P - L2m4 + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P - L2m4 + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P - L2m4 + 0]) * OpMatrixIB_[4];
        RX += ((int)BmpBuf_[P - L1p8 + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - L1p8 + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - L1p8 + 0]) * OpMatrixIB_[5];
        RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[6];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[7];
        RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[8];
        RX += ((int)BmpBuf_[P - L1m4 + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P - L1m4 + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P - L1m4 + 0]) * OpMatrixIB_[9];
        RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[10];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[11];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[13];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[14];
        RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[15];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[16];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[17];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[18];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[19];
        RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[20];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[21];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[22];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[23];
        RX += ((int)BmpBuf_[P + 4    + 2]) * OpMatrixIR_[24]; GX += ((int)BmpBuf_[P + 4    + 1]) * OpMatrixIG_[24]; BX += ((int)BmpBuf_[P + 4    + 0]) * OpMatrixIB_[24];
        RX = ((RX + Offset1R) / GainR) + Offset2R;
        GX = ((GX + Offset1G) / GainG) + Offset2G;
        BX = ((BX + Offset1B) / GainB) + Offset2B;
        BmpBufX_[P + 2] = Range(RX, 0, 255);
        BmpBufX_[P + 1] = Range(GX, 0, 255);
        BmpBufX_[P + 0] = Range(BX, 0, 255);
        P += 4;

        RX = 0;
        GX = 0;
        BX = 0;
        RX += ((int)BmpBuf_[P - L2p8 + 2]) * OpMatrixIR_[0];  GX += ((int)BmpBuf_[P - L2p8 + 1]) * OpMatrixIG_[0];  BX += ((int)BmpBuf_[P - L2p8 + 0]) * OpMatrixIB_[0];
        RX += ((int)BmpBuf_[P - L2p4 + 2]) * OpMatrixIR_[1];  GX += ((int)BmpBuf_[P - L2p4 + 1]) * OpMatrixIG_[1];  BX += ((int)BmpBuf_[P - L2p4 + 0]) * OpMatrixIB_[1];
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[2];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[2];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[2];
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[3];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[3];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[3];
        RX += ((int)BmpBuf_[P - L2   + 2]) * OpMatrixIR_[4];  GX += ((int)BmpBuf_[P - L2   + 1]) * OpMatrixIG_[4];  BX += ((int)BmpBuf_[P - L2   + 0]) * OpMatrixIB_[4];
        RX += ((int)BmpBuf_[P - L1p8 + 2]) * OpMatrixIR_[5];  GX += ((int)BmpBuf_[P - L1p8 + 1]) * OpMatrixIG_[5];  BX += ((int)BmpBuf_[P - L1p8 + 0]) * OpMatrixIB_[5];
        RX += ((int)BmpBuf_[P - L1p4 + 2]) * OpMatrixIR_[6];  GX += ((int)BmpBuf_[P - L1p4 + 1]) * OpMatrixIG_[6];  BX += ((int)BmpBuf_[P - L1p4 + 0]) * OpMatrixIB_[6];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[7];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[7];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[7];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[8];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[8];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[8];
        RX += ((int)BmpBuf_[P - L1   + 2]) * OpMatrixIR_[9];  GX += ((int)BmpBuf_[P - L1   + 1]) * OpMatrixIG_[9];  BX += ((int)BmpBuf_[P - L1   + 0]) * OpMatrixIB_[9];
        RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[10]; GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[10]; BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[10];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[11]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[11]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[11];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[12]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[12]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[12];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[13]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[13]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[13];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[14]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[14]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[14];
        RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[15]; GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[15]; BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[15];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[16]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[16]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[16];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[17]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[17]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[17];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[18]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[18]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[18];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[19]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[19]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[19];
        RX += ((int)BmpBuf_[P - 8    + 2]) * OpMatrixIR_[20]; GX += ((int)BmpBuf_[P - 8    + 1]) * OpMatrixIG_[20]; BX += ((int)BmpBuf_[P - 8    + 0]) * OpMatrixIB_[20];
        RX += ((int)BmpBuf_[P - 4    + 2]) * OpMatrixIR_[21]; GX += ((int)BmpBuf_[P - 4    + 1]) * OpMatrixIG_[21]; BX += ((int)BmpBuf_[P - 4    + 0]) * OpMatrixIB_[21];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[22]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[22]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[22];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[23]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[23]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[23];
        RX += ((int)BmpBuf_[P        + 2]) * OpMatrixIR_[24]; BX += ((int)BmpBuf_[P        + 0]) * OpMatrixIB_[24]; GX += ((int)BmpBuf_[P        + 1]) * OpMatrixIG_[24];
        RX = ((RX + Offset1R) / GainR) + Offset2R;
        GX = ((GX + Offset1G) / GainG) + Offset2G;
        BX = ((BX + Offset1B) / GainB) + Offset2B;
        BmpBufX_[P + 2] = Range(RX, 0, 255);
        BmpBufX_[P + 1] = Range(GX, 0, 255);
        BmpBufX_[P + 0] = Range(BX, 0, 255);
        P += 4;
    }
}
